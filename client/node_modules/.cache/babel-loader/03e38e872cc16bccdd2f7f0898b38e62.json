{"ast":null,"code":"// Reducer is always listening for dispatched data, it is how data is dispatched to data layer\n// Reducer resembles API code beteen the app and the data layer\nexport const initialState = {\n  basket: [],\n  user: null\n}; // Selector\n\nexport const getBasketTotal = basket => {\n  let totalPrice = 0; // for of iterates over nodeLists and Array-like Objects\n\n  for (const element of basket) {\n    totalPrice += element.price;\n  } // Create our number formatter.\n\n\n  var formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    // These options are needed to round to whole numbers if that's what you want.\n    minimumFractionDigits: 2 // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n\n  });\n  const formattedPrice = formatter.format(totalPrice);\n  /* $2,500.00 */\n\n  return formattedPrice;\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_BASKET':\n      return { // returns the previous state plus newly dispatched object\n        ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'REMOVE_FROM_BASKET':\n      // In this site all of the same items share ids so expression below finds first matched ID and returns its location in the array\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      console.log(`The index is  ${index}`);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        // find the point where that item was and remove it\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Cant remove product (id: ${action.id}) as it's not in basket!`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    case 'EMPTY_BASKET':\n      return { ...state,\n        basket: []\n      };\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Daniel/Desktop/Dev Projects/Amazon/amazon-clone-v2/amazon-clone/client/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","totalPrice","element","price","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","formattedPrice","format","reducer","state","action","type","item","index","findIndex","basketItem","id","console","log","newBasket","splice","warn"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAArB,C,CAKP;;AACA,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAAY;AACtC,MAAIG,UAAU,GAAI,CAAlB,CADsC,CAGtC;;AACA,OAAK,MAAMC,OAAX,IAAsBJ,MAAtB,EAA8B;AAC1BG,IAAAA,UAAU,IAAIC,OAAO,CAACC,KAAtB;AACH,GANqC,CAQtC;;;AACA,MAAIC,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAC3CC,IAAAA,KAAK,EAAE,UADoC;AAE3CC,IAAAA,QAAQ,EAAE,KAFiC;AAG3C;AACAC,IAAAA,qBAAqB,EAAE,CAJoB,CAIjB;AAC1B;;AAL2C,GAA/B,CAAhB;AAQA,QAAMC,cAAc,GAAGN,SAAS,CAACO,MAAV,CAAiBV,UAAjB,CAAvB;AAAqD;;AACrD,SAAOS,cAAP;AAEH,CApBM;;AAwBP,MAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAE/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO,EACH;AACA,WAAGF,KAFA;AAGHf,QAAAA,MAAM,EAAE,CAAC,GAAGe,KAAK,CAACf,MAAV,EAAkBgB,MAAM,CAACE,IAAzB;AAHL,OAAP;;AAMJ,SAAK,oBAAL;AACI;AACA,YAAMC,KAAK,GAAGJ,KAAK,CAACf,MAAN,CAAaoB,SAAb,CACVC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBN,MAAM,CAACM,EAD9B,CAAd;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBL,KAAM,EAAnC;AAED,UAAIM,SAAS,GAAG,CAAC,GAAGV,KAAK,CAACf,MAAV,CAAhB;;AAEA,UAAImB,KAAK,IAAI,CAAb,EAAgB;AACX;AACDM,QAAAA,SAAS,CAACC,MAAV,CAAiBP,KAAjB,EAAwB,CAAxB;AACH,OAHD,MAGO;AACHI,QAAAA,OAAO,CAACI,IAAR,CAAe,4BAA2BX,MAAM,CAACM,EAAG,0BAApD;AACF;;AACF,aAAO,EACH,GAAGP,KADA;AAEHf,QAAAA,MAAM,EAAEyB;AAFL,OAAP;;AAKH,SAAK,cAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHf,QAAAA,MAAM,EAAE;AAFL,OAAP;;AAKJ,SAAK,UAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHd,QAAAA,IAAI,EAAEe,MAAM,CAACf;AAFV,OAAP;;AAKJ;AACI,aAAOc,KAAP;AA1CR;AA4CH,CA9CD;;AAgDA,eAAeD,OAAf","sourcesContent":["// Reducer is always listening for dispatched data, it is how data is dispatched to data layer\r\n// Reducer resembles API code beteen the app and the data layer\r\nexport const initialState = {\r\n    basket: [],\r\n    user: null\r\n};\r\n\r\n// Selector\r\nexport const getBasketTotal = (basket) => {\r\n    let totalPrice  = 0 ; \r\n\r\n    // for of iterates over nodeLists and Array-like Objects\r\n    for (const element of basket) {\r\n        totalPrice += element.price\r\n    }\r\n\r\n    // Create our number formatter.\r\n    var formatter = new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        // These options are needed to round to whole numbers if that's what you want.\r\n        minimumFractionDigits: 2, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n        //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n    });\r\n\r\n    const formattedPrice = formatter.format(totalPrice); /* $2,500.00 */\r\n    return formattedPrice\r\n\r\n}; \r\n\r\n \r\n\r\nconst reducer = (state, action) => {\r\n    \r\n    switch(action.type) {\r\n        case 'ADD_TO_BASKET': \r\n            return {\r\n                // returns the previous state plus newly dispatched object\r\n                ...state,\r\n                basket: [...state.basket, action.item],\r\n            };\r\n\r\n        case 'REMOVE_FROM_BASKET': \r\n            // In this site all of the same items share ids so expression below finds first matched ID and returns its location in the array\r\n            const index = state.basket.findIndex(\r\n               (basketItem) => basketItem.id === action.id\r\n            );\r\n            \r\n            console.log(`The index is  ${index}`);\r\n\r\n           let newBasket = [...state.basket];\r\n\r\n           if (index >= 0) {\r\n                // find the point where that item was and remove it\r\n               newBasket.splice(index, 1); \r\n           } else {\r\n               console.warn( `Cant remove product (id: ${action.id}) as it's not in basket!` )\r\n            }\r\n           return {\r\n               ...state,\r\n               basket: newBasket\r\n            };\r\n\r\n        case 'EMPTY_BASKET': \r\n            return { \r\n                ...state,\r\n                basket: []\r\n            }\r\n\r\n        case 'SET_USER':\r\n            return {\r\n                ...state, \r\n                user: action.user\r\n            };\r\n\r\n        default:\r\n            return state; \r\n    }\r\n};\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}