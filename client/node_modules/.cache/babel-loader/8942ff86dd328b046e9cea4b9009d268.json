{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\Dev Projects\\\\Amazon\\\\amazon-clone-v2\\\\amazon-clone\\\\client\\\\src\\\\Payment.js\",\n    _s = $RefreshSig$();\n\n// This component is the checkout page \nimport React, { useState, useEffect } from 'react'; // import axios local file\n\nimport axios from './axios';\nimport './Payment.css';\nimport { useStateValue } from \"./StateProvider\";\nimport { getBasketTotal } from './reducer';\nimport CheckoutProduct from './CheckoutProduct';\nimport CurrencyFormat from 'react-currency-format';\nimport { Link, useHistory } from 'react-router-dom';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Payment() {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const history = useHistory();\n  const [{\n    basket,\n    user\n  }, dispatch] = useStateValue();\n  const [error, setError] = useState(null);\n  const [disabled, setDisabled] = useState(true);\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(\"\");\n  const [clientSecret, setClientSecret] = useState(true);\n  const [priceTotal, setPriceTotal] = useState(0);\n  let totalPrice = 0;\n\n  for (const element of basket) {\n    totalPrice += element.price;\n    console.log(totalPrice);\n  }\n\n  const priceString = totalPrice.toString();\n  const formatedPrice = priceString.split('.').join('');\n  useEffect(() => {\n    if (formatedPrice > 0) {\n      // generate stripe secret reflecting new amount each time the basket changes\n      const getClientSecret = async () => {\n        // const urlPrice = priceTotal * 100 \n        // console.log(`The total price amount is state is >>> ${priceTotal}`)\n        console.log('the amount being picked picked up through the url is ', formatedPrice);\n        const response = await axios({\n          method: 'POST',\n          // stripe expects currenct in subunits i.e. cents\n          url: `/payments/create?total=${formatedPrice}`\n        });\n        setClientSecret(response.data.clientSecret);\n        console.log(response);\n      };\n\n      getClientSecret();\n    } else {\n      console.log('priceTotal is 0, no requset sent');\n    }\n  }, [basket]);\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // disable buy button if pressed multiple times\n\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    }).then(({\n      paymentIntent\n    }) => {\n      // paymentIntent = payment confirmation\n      // go to db at users collection find user by id and go to their orders collection\n      // then create a row/document with order conf id, and set data to order conf data\n      db.collection('users') // uid is very important\n      .doc(user === null || user === void 0 ? void 0 : user.uid).collection('orders').doc(paymentIntent.id).set({\n        basket: basket,\n        amount: paymentIntent.amount,\n        created: paymentIntent.created\n      });\n      setSucceeded(true);\n      setError(null);\n      setProcessing(false);\n      dispatch({\n        type: 'EMPTY_BASKET'\n      }); // dont want to allow user to go back to payment page so using history.replace instead of push\n\n      history.replace('/orders');\n    });\n  };\n\n  const handleChange = e => {\n    // Listen for changes in CardElement\n    // and display any errors as the customer types their details\n    setDisabled(e.empty);\n    setError(e.error ? e.error.message : \"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Checkout (\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/checkout\",\n          children: basket === null || basket === void 0 ? void 0 : basket.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Delivery Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__address\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: user === null || user === void 0 ? void 0 : user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"123 React Lane \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Atlanta, Ga\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Review Items and Delivery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__items\",\n          children: basket.map(item => /*#__PURE__*/_jsxDEV(CheckoutProduct, {\n            id: item.id,\n            title: item.title,\n            image: item.image,\n            price: item.price,\n            rating: item.rating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Payment Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__details\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(CardElement, {\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"payment__priceContainer\",\n              children: [/*#__PURE__*/_jsxDEV(CurrencyFormat, {\n                renderText: value => /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\" Order Total: \", value, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 45\n                }, this),\n                decimalScale: 2,\n                value: getBasketTotal(basket),\n                thousandSeparator: true,\n                prefix: \"$\",\n                displayType: \"text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: processing || disabled || succeeded,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: processing ? /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Processing...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 57\n                  }, this) : \"Buy Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Payment, \"4Wm6cTAE3HDwYeH5p2QL9L+OAWU=\", false, function () {\n  return [useStripe, useElements, useHistory, useStateValue];\n});\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["C:/Users/Daniel/Desktop/Dev Projects/Amazon/amazon-clone-v2/amazon-clone/client/src/Payment.js"],"names":["React","useState","useEffect","axios","useStateValue","getBasketTotal","CheckoutProduct","CurrencyFormat","Link","useHistory","CardElement","useStripe","useElements","Payment","stripe","elements","history","basket","user","dispatch","error","setError","disabled","setDisabled","succeeded","setSucceeded","processing","setProcessing","clientSecret","setClientSecret","priceTotal","setPriceTotal","totalPrice","element","price","console","log","priceString","toString","formatedPrice","split","join","getClientSecret","response","method","url","data","handleSubmit","e","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","then","paymentIntent","db","collection","doc","uid","id","set","amount","created","type","replace","handleChange","empty","message","length","email","map","item","title","image","rating","value"],"mappings":"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","sourcesContent":["// This component is the checkout page \r\nimport React, { useState, useEffect } from 'react'\r\n// import axios local file\r\nimport axios from './axios';\r\nimport './Payment.css'\r\nimport { useStateValue } from \"./StateProvider\"; \r\nimport { getBasketTotal } from './reducer';\r\nimport CheckoutProduct from './CheckoutProduct';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'\r\n  \r\n \r\n \r\nfunction Payment() {\r\n\r\n    const stripe = useStripe(); \r\n    const elements = useElements();\r\n    const history = useHistory();\r\n\r\n    const [{ basket, user }, dispatch] = useStateValue(); \r\n    const [error, setError] = useState(null);\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [succeeded, setSucceeded] = useState(false);\r\n    const [processing, setProcessing] = useState(\"\");\r\n    const [clientSecret, setClientSecret] = useState(true);\r\n    const [priceTotal, setPriceTotal] = useState(0); \r\n\r\n    let totalPrice = 0; \r\n\r\n    for (const element of basket) {\r\n        totalPrice += element.price; \r\n        console.log(totalPrice)\r\n    }\r\n\r\n    const priceString = totalPrice.toString(); \r\n    const formatedPrice = priceString.split('.').join('')\r\n    \r\n    \r\n\r\n    \r\n\r\n    \r\n    useEffect(() => {\r\n        \r\n        if (formatedPrice > 0) {\r\n            // generate stripe secret reflecting new amount each time the basket changes\r\n            const getClientSecret = async () => {\r\n                // const urlPrice = priceTotal * 100 \r\n                // console.log(`The total price amount is state is >>> ${priceTotal}`)\r\n                console.log('the amount being picked picked up through the url is ', formatedPrice);\r\n                \r\n                const response = await axios({\r\n                    method: 'POST',\r\n                    // stripe expects currenct in subunits i.e. cents\r\n                    url: `/payments/create?total=${formatedPrice}`\r\n                }); \r\n                setClientSecret(response.data.clientSecret);\r\n                console.log(response)\r\n            }\r\n            getClientSecret()\r\n        }\r\n        else{ \r\n            console.log('priceTotal is 0, no requset sent')\r\n        }\r\n    }, [basket])\r\n \r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); \r\n        // disable buy button if pressed multiple times\r\n        setProcessing(true);\r\n\r\n        const payload = await stripe.confirmCardPayment(clientSecret, {\r\n            payment_method: {\r\n                card: elements.getElement(CardElement)\r\n            }\r\n        }).then(({ paymentIntent }) => {\r\n            // paymentIntent = payment confirmation\r\n\r\n            // go to db at users collection find user by id and go to their orders collection\r\n            // then create a row/document with order conf id, and set data to order conf data\r\n            db\r\n            .collection('users')\r\n            // uid is very important\r\n            .doc(user?.uid)\r\n            .collection('orders')\r\n            .doc(paymentIntent.id)\r\n            .set({\r\n                basket: basket,\r\n                amount: paymentIntent.amount,\r\n                created: paymentIntent.created\r\n            }); \r\n\r\n\r\n            setSucceeded(true);\r\n            setError(null)\r\n            setProcessing(false)\r\n\r\n            dispatch({\r\n                type: 'EMPTY_BASKET'\r\n            })\r\n\r\n            // dont want to allow user to go back to payment page so using history.replace instead of push\r\n            history.replace('/orders')\r\n        })       \r\n    }\r\n\r\n\r\n    const handleChange = e => {\r\n        // Listen for changes in CardElement\r\n        // and display any errors as the customer types their details\r\n        setDisabled(e.empty); \r\n        setError(e.error ? e.error.message : \"\");\r\n    }\r\n\r\n    return (\r\n        <div className='payment'>\r\n            <div className='payment__container'>\r\n                {/* containss all checkout info and review items */}\r\n                {/* Delivery address - payment section */}\r\n\r\n                <h1>\r\n                    Checkout (\r\n                        < Link to=\"/checkout\">{basket?.length}</Link>\r\n                    )\r\n                </h1>\r\n                <div className='payment__section'>\r\n                    <div className='payment__title'>\r\n                        <h3>Delivery Address</h3>\r\n                    </div>\r\n                    <div className='payment__address'>\r\n                        <p>{ user?.email }</p>\r\n                        <p>123 React Lane </p>\r\n                        <p>Atlanta, Ga</p>\r\n                    </div> \r\n                </div>\r\n                {/* Review Items - payment section */}\r\n                <div className='payment__section'>\r\n                    <div className=\"payment__title\">\r\n                        <h3>Review Items and Delivery</h3>\r\n                    </div>\r\n                    <div className='payment__items'>\r\n                        { basket.map(item => (\r\n                            < CheckoutProduct \r\n                                id={item.id}\r\n                                title={item.title}\r\n                                image={item.image}\r\n                                price={item.price}\r\n                                rating={item.rating}\r\n                            /> \r\n                        ))}\r\n                    </div>      \r\n                </div>  \r\n                {/* Payment Method - payment section */}\r\n                <div className='payment__section'>\r\n                    <div className='payment__title'>\r\n                        <h3>Payment Method</h3>\r\n                    </div>\r\n                    <div className='payment__details'>\r\n                        {/* Stripe magic will go */}\r\n                        <form onSubmit={handleSubmit}>\r\n                            <CardElement onChange={handleChange}/>\r\n                            <div className='payment__priceContainer'>\r\n                                <CurrencyFormat \r\n                                        renderText={(value) => (\r\n                                            <h3> Order Total: { value } </h3>\r\n                                        )}\r\n                                        decimalScale={2}\r\n                                        value={getBasketTotal(basket)}\r\n                                        thousandSeparator={true}\r\n                                        prefix={\"$\"}\r\n                                        displayType={\"text\"}\r\n                                    />\r\n                                <button disabled={ processing || disabled || succeeded}>\r\n                                    <span>{processing ? <p>Processing...</p> : \"Buy Now\"}</span>\r\n                                </button>\r\n                            </div>\r\n\r\n                            {/* Errors */}\r\n                            {error && <div>{error}</div>}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Payment\r\n"]},"metadata":{},"sourceType":"module"}